using System;
using System.Collections.Generic;
using System.Linq;

public class GeneticAlgorithm
{
    private Random random = new Random();

    // Генерация случайной хромосомы
    public string Generate(int length)
    {
        return new string(Enumerable.Range(0, length).Select(_ => random.Next(2) == 0 ? '0' : '1').ToArray());
    }

    // Рулетка для выбора родителя на основе фитнеса
    public string Select(IEnumerable<string> population, IEnumerable<double> fitnesses, double sum = 0)
    {
        var populationArray = population.ToArray();
        var fitnessArray = fitnesses.ToArray();

        sum = fitnessArray.Sum();
        double threshold = random.NextDouble() * sum;
        double cumulative = 0;

        for (int i = 0; i < populationArray.Length; i++)
        {
            cumulative += fitnessArray[i];
            if (cumulative >= threshold)
            {
                return populationArray[i];
            }
        }

        return populationArray.Last();
    }

    // Мутация хромосомы с вероятностью probability
    public string Mutate(string chromosome, double probability)
    {
        return new string(chromosome.Select(bit =>
            random.NextDouble() < probability ? (bit == '0' ? '1' : '0') : bit).ToArray());
    }

    // Кроссовер между двумя хромосомами
    public IEnumerable<string> Crossover(string chromosome1, string chromosome2)
    {
        if (random.NextDouble() < 0.6) // 60% вероятность кроссовера
        {
            int crossoverPoint = random.Next(1, chromosome1.Length); // Точка разреза
            return new string[]
            {
                chromosome1.Substring(0, crossoverPoint) + chromosome2.Substring(crossoverPoint),
                chromosome2.Substring(0, crossoverPoint) + chromosome1.Substring(crossoverPoint)
            };
        }
        return new string[] { chromosome1, chromosome2 };
    }

    // Главный метод выполнения алгоритма
    public string Run(Func<string, double> fitness, int length, double p_c, double p_m, int iterations = 100)
    {
        int populationSize = 100; // Размер популяции
        var population = Enumerable.Range(0, populationSize).Select(_ => Generate(length)).ToList();

        for (int iter = 0; iter < iterations; iter++)
        {
            // Оцениваем фитнес текущей популяции
            var fitnesses = population.Select(fitness).ToList();
            var newPopulation = new List<string>();

            while (newPopulation.Count < populationSize)
            {
                // Выбираем двух родителей
                string parent1 = Select(population, fitnesses);
                string parent2 = Select(population, fitnesses);

                // Выполняем кроссовер
                var children = Crossover(parent1, parent2).ToArray();

                // Добавляем детей с мутацией
                newPopulation.Add(Mutate(children[0], p_m));
                newPopulation.Add(Mutate(children[1], p_m));
            }

            // Обновляем популяцию
            population = newPopulation.Take(populationSize).ToList();
        }

        // Возвращаем самую подходящую хромосому
        return population.OrderByDescending(fitness).First();
    }
}
